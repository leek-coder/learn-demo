<?xml version="1.0" encoding="UTF-8"?>
<!--
说明：
    1. 文件的命名和加载顺序有关
       logback.xml早于application.yml加载，logback-spring.xml晚于application.yml加载
       如果logback配置需要使用application.yml中的属性，需要命名为logback-spring.xml
    2. logback使用application.yml中的属性
       使用springProperty才可使用application.yml中的值 可以设置默认值
    3. if标签依赖 org.codehaus.janino 包
    4. 日志中输出行号，可能会带来性能问题

-->
<configuration scan="true" scanPeriod="60 seconds">
    <!-- service env -->
    <springProperty scope="context" name="env" source="spring.profiles.active" defaultValue="dev"/>


    <property name="LOG_FILE" value="./logs/order-service.log"/>


    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <!-- encoder 默认配置为PatternLayoutEncoder -->
        <encoder class="ch.qos.logback.core.encoder.LayoutWrappingEncoder">
            <layout class="org.apache.skywalking.apm.toolkit.log.logback.v1.x.TraceIdPatternLogbackLayout">
                <pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%thread] %-5level logger_name:%logger{36} - [%tid] - message:%msg%n</pattern>
            </layout>
        </encoder>
    </appender>

    <!--%-5p(日志级别) | %d(日期) | bt-v1.0 | [%t(线程名称)-%T(线程号)] (%c{1.}(简化全类名):%L(行号))
        | %m(日志信息)%n(换行) -->
    <!--<property name="PATTERN">%-5p | %d | bt-v1.0 | [%t-%T] (%c{1.}:%L) |
        %m%n</property> -->
    <!-- 这一句至关重要如果没有，就无法输出sql语句 -->
    <logger name="com.huatech.mall" level="info" />
    <appender name="FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">

        <File>${LOG_FILE}</File>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd_HH}.gz</fileNamePattern>
        </rollingPolicy>
        <encoder class="ch.qos.logback.core.encoder.LayoutWrappingEncoder">
            <layout class="org.apache.skywalking.apm.toolkit.log.logback.v1.x.TraceIdPatternLogbackLayout">
                <pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%thread] %-5level logger_name:%logger{36} - [%tid] - message:%msg%n</pattern>
            </layout>
        </encoder>
    </appender>

    <!-- 异步输出 -->
    <appender name="ASYNC" class="ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>512</queueSize>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref="FILE"/>
        <IncludeCallerData>true</IncludeCallerData>
    </appender>

    <!-- 如果是生产环境不向控制台输出日志数据 isDefined() isNull() p() or property() equals() contains -->

    <if condition='p("env").equals("pro")'>
        <then>
            <root level="info">
                <!-- 输出到日志文件 -->
                <appender-ref ref="ASYNC"/>
            </root>
        </then>
        <else>
            <root level="info">
                <!-- 输出到日志文件 -->
                <appender-ref ref="ASYNC"/>
                <!-- 输出到控制台 -->
                <appender-ref ref="STDOUT"/>
            </root>
        </else>
    </if>


</configuration>